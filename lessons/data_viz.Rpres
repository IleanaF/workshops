```{r setup, echo = FALSE, message = F, warning = F}
library(tidyverse)

# chunk options
knitr::opts_chunk$set(warning = FALSE, message = FALSE, dpi = 300, fig.align = 'center', out.width = '700px')

# chunk hook
knitr::knit_hooks$set(
  small.mar = function(before = FALSE, options, envir) {
    if (before) par(mar = c(4, 4, .5, .5))  # smaller margin on top and right
    }, 
  def.mar = function(before, options, envir) {
    if (before) par(mar = c(5, 4, 4, 2))
    }
  )

```
<insertHTML:[columns.html]

Data Visualization
========================================================
date: November 5, 2017
author: Marcus W Beck
autosize: false
css: frm.css
transition: none
width: 960
height: 700

```{r fig.width = 8, fig.height = 4.5, out.width = '800px', echo = F}
data(iris)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species, group = Species)) + 
  geom_point() + 
  geom_smooth(method = 'lm') + 
  theme_bw()
```

Lesson outline
========================================================
A whirlwind tour of data viz
* Simple plots with base R
* `ggplot2`: introduction
* `ggplot2`: data, mapping, aesthetics, and geom layers
* `ggplot2`: themes
* `ggplot2`: additional geoms
* Resources

Motivation
========================================================
* You can make some really cool graphs in R

<div align='center'>
<img src="data_viz-figure/cool1.png" alt="Drawing" style="width: 600px;"/>
</div>

Motivation
========================================================
* You can make some really cool graphs in R

<div align='center'>
<img src="data_viz-figure/cool2.jpg" alt="Drawing" style="width: 800px;"/>
</div>

Motivation
========================================================
* You can make some really cool graphs in R

<div align='center'>
<img src="data_viz-figure/cool3.jpg" alt="Drawing" style="width: 600px;"/>
</div>

Motivation
========================================================
* You can make some really cool graphs in R

3d and interactive: 
https://blog.plot.ly/post/101360048217/7-plotly-graphs-in-3d-stocks-cats-and-lakes

A CERF example:
https://fawda123.github.io/ADOSR/depth_ex

Simple plots with base R
========================================================
* Base graphics in R (i.e, those that come with the software) can do most anything for you
* But they're kind of ugly in the default format (bad for pubs)
* Customization is tedious...
* Easy to use for quick, exploratory plots

Simple plots with base R
========================================================
* Let's load the `iris` dataset from the [datasets](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html) package
* Measurements on 150 flowers from three species
* *Fisher, R. A. (1936) The use of multiple measurements in taxonomic problems. Annals of Eugenics, 7, Part II, 179–188.*
```{r}
data(iris)
str(iris)
```

Simple plots with base R
========================================================
* Let's load the `iris` dataset from the [datasets](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html) package
* Measurements on 150 flowers from three species
* *Fisher, R. A. (1936) The use of multiple measurements in taxonomic problems. Annals of Eugenics, 7, Part II, 179–188.*
```{r}
data(iris)
head(iris)
```

Simple plots with base R
========================================================
* The scatterplot can be created with `plot`
* It can be created with one line... `plot(x, y)`
* This literally says... from the data object, plot the variables x (on the x-axis) against y (on the y-axis)
```{r, fig.width = 6, fig.height = 4.5, eval = F}
plot(iris$Sepal.Width, iris$Sepal.Length)
```

Simple plots with base R
========================================================
```{r, fig.width = 5, fig.height = 4, small.mar = TRUE}
plot(iris$Sepal.Width, iris$Sepal.Length)
```

Simple plots with base R
========================================================
* But check out the axis labels...
```{r, fig.width = 5, fig.height = 4, eval = T, out.width = '600px', small.mar = T}
plot(iris$Sepal.Width, iris$Sepal.Length)
```

Simple plots with base R
========================================================
* `plot` has lots of optional arguments, called within `plot` or separately using `par`
<div align='center'>
<img src="data_viz-figure/plotopt.png" alt="Drawing" style="width: 800px;"/>
</div> 

Simple plots with base R
========================================================
* Change axis labels, give it a title...
```{r, fig.width = 5, fig.height = 4, eval = T, out.width = '600px', def.mar = T}
plot(iris$Sepal.Width, iris$Sepal.Length, xlab = 'Width (cm)', ylab = 'Length (cm)', main = 'Sepal dimensions')
```

Simple plots with base R
========================================================
* Other base plot functions - histogram
```{r, fig.width = 5, fig.height = 4, small.par = T}
hist(iris$Sepal.Length)
```

Simple plots with base R
========================================================
* Other base plot functions - paired scatter plots
```{r, fig.width = 5, fig.height = 4, small.par = T}
pairs(iris)
```

Exercise 1
========================================================
* Using the `iris` dataset, make a scatterplot of petal length (y axis) vs petal width (x-axis)
* Give it appropriate axis labels and a title

ggplot2: introduction
========================================================
* Base graphics are okay for exploratory stuff
* ggplot2 is meant to improve on base by linking the graph components following a **grammar of graphics** - like parts of speech
* Makes thinking, reasoning, and communicatings graphics easier
* Start with a foundational component to add additional pieces

<div align='center'>
<img src="data_viz-figure/ggplot2_hex.png" alt="Drawing" style="width: 200px;"/>
</div>

ggplot2: introduction
========================================================
* We'll start by loading [tidyverse](https://www.tidyverse.org/), which includes ggplot2 (you should have this from the earlier session)
```{r, eval = F}
library(tidyverse)
```
To verify it's loaded...
```{r}
loadedNamespaces()
```

ggplot2: data, mapping, aesthetics, and layers
========================================================
* The general concepts of `ggplot2` revolve around the **data**, plot **layers**, **aesthetics**, and **mapping**
* This is by far the biggest hurdle in learning `ggplot`
* Just remember, the **aesthetics** are parts of the plot **layers** that **map** the variables in the **data** to the plot
* We'll demonstrate when this system breaks down to understand how it works

ggplot2: data, mapping, aesthetics, and layers
========================================================
* We'll start with a very simple scatterplot with the iris data
```{r}
head(iris)
```

ggplot2: data, mapping, aesthetics, and layers
========================================================
* All ggplot plots start with the `ggplot` function
* It will typically need two pieces of information, the **data** and how the data are **mapped** to the plot **aesthetics**
```{r, eval = F}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length))
```
* This says, make a `ggplot` object for the iris **data**, where the variables Sepal.Width and Sepal.Length are **mapped** to the x and y **aesthetics**

ggplot2: data, mapping, aesthetics, and layers
========================================================
* The `aes` function defines the mapping of variables to aesthetics
```{r}
aes(x = Sepal.Width, y = Sepal.Length)
```

ggplot2: data, mapping, aesthetics, and layers
========================================================
* What happens when we run this function?
```{r, fig.width = 5, fig.height = 3}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length))
```
* We get an empty plot - this is our foundation

ggplot2: data, mapping, aesthetics, and layers
========================================================
* We add plot elements to the base plot using `+`
```{r, fig.width = 5, fig.height = 3}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)) +
  geom_point()
```

Exercise 2
========================================================
* Using the `iris` dataset, use ggplot to make a scatterplot of petal length (y axis) vs petal width (x-axis)

ggplot2: data, mapping, aesthetics, and layers
========================================================
* We add plot elements to the base plot using `+`
```{r, eval = F}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)) +
  geom_point()
```
* "geoms" are plot layers that put the mapping of aesthetics in action
* There are many geoms: [http://ggplot2.tidyverse.org/reference/](http://ggplot2.tidyverse.org/reference/)

ggplot2: data, mapping, aesthetics, and layers
========================================================
* We can swap out any geom that uses x/y aesthetics
```{r, fig.width = 5, fig.height = 3.5}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)) +
  geom_line()
```

ggplot2: data, mapping, aesthetics, and layers
========================================================
* We can swap out any geom that uses x/y aesthetics
```{r, fig.width = 5, fig.height = 3.5}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)) +
  geom_count()
```

ggplot2: data, mapping, aesthetics, and layers
========================================================
* We can swap out any geom that uses x/y aesthetics
```{r, fig.width = 5, fig.height = 3.5}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)) +
  geom_density_2d()
```

ggplot2: data, mapping, aesthetics, and layers
========================================================
* We can swap out any geom that uses x/y aesthetics
```{r eval = F}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)) +
  geom_linerange()
```
```
Error: geom_linerange requires the following missing aesthetics: ymin, ymax
Execution halted
```
* Oh snap, what happened?

ggplot2: data, mapping, aesthetics, and layers
========================================================
* We can swap out any geom that uses x/y aesthetics
```{r eval = F}
?geom_linerange
```
<div align='center'>
<img src="data_viz-figure/aesreq.png" alt="Drawing" style="width: 800px;"/>
</div>

ggplot2: data, mapping, aesthetics, and layers
========================================================
* Let's return to the `geom_point` layer, what are its aesthetics?
```{r eval = F}
?geom_point
```
<div align='center'>
<img src="data_viz-figure/aesreq2.png" alt="Drawing" style="width: 800px;"/>
</div>

ggplot2: data, mapping, aesthetics, and layers
========================================================
* Let's add some more aesthetics
```{r, fig.width = 5, fig.height = 3}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length, 
                        colour = Species)) +
  geom_point()
```

ggplot2: data, mapping, aesthetics, and layers
========================================================
* Let's add some more aesthetics
```{r, fig.width = 5, fig.height = 3}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length, 
                        colour = Species, size = Sepal.Width)) +
  geom_point()
```

ggplot2: data, mapping, aesthetics, and layers
========================================================
* Let's add some more aesthetics, what's the difference?
```{r, fig.width = 5, fig.height = 3}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length, 
                        colour = Species, size = Species)) +
  geom_point()
```

ggplot2: data, mapping, aesthetics, and layers
========================================================
* We'll use this plot going forward
```{r, eval = F}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length, 
                        colour = Species)) +
  geom_point()
```
Let's save it as an object:
```{r}
p <- ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length, 
                             colour = Species)) +
  geom_point()
class(p)
```

ggplot2: data, mapping, aesthetics, and layers
========================================================
* Let's modify the plot a bit
```{r, fig.width = 5, fig.height = 3.5}
p <- p + xlab('Width (cm)') + ylab('Length (cm)') +
  ggtitle('Iris sepal dimensions')
p
```

ggplot2: data, mapping, aesthetics, and layers
========================================================
* Let's modify the plot a bit
```{r, fig.width = 5, fig.height = 3.5}
p <- p + scale_colour_manual(values = c('red', 'blue', 'green'))
p
```

ggplot2: data, mapping, aesthetics, and layers
========================================================
* What does our plot object contain?
```{r, eval = F}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length, 
                             colour = Species)
       ) +
  geom_point() +
  xlab('Width (cm)') + ylab('Length (cm)') +
  ggtitle('Iris sepal dimensions') +
  scale_colour_manual(values = c('red', 'blue', 'green'))
```

ggplot2: themes
========================================================
* We can further modify ggplot objects using `theme`
* This is for all non-data elements of a plot, such as:
  * fonts
  * legend position
  * plot and panel backgrounds
  * axis tick spacing
  * grid lines
  * etc.
  
ggplot2: themes
========================================================
* Let's change the legend position
```{r, fig.width = 5, fig.height = 3}
p <- p + theme(legend.position = 'top')
p
```

ggplot2: themes
========================================================
* Let's remove the grid lines
```{r, fig.width = 5, fig.height = 3}
p <- p + theme(
  panel.grid.major = element_blank(), 
  panel.grid.minor = element_blank()
)
p
```

ggplot2: themes
========================================================
* Let's change the plot background color
```{r, fig.width = 5, fig.height = 3}
p <- p + theme(panel.background = element_rect(fill = 'white'))
p
```

ggplot2: themes
========================================================
* How many theme options are there? 
```{r, eval = F}
?theme
```
<div align='center'>
<img src="data_viz-figure/thms.png" alt="Drawing" style="width: 800px;"/>
</div>

ggplot2: themes
========================================================
* Fortunately, we have several pre-packaged themes
* These are overall themes that can be called with one function
* However, it's still useful to know about `theme` for specific plot options
* What are the pre-packaged themes?
  * `theme_bw()`
  * `theme_classic()` 
  * `theme_minimal()`
  * [http://ggplot2.tidyverse.org/reference/ggtheme.html]()
  * [https://github.com/jrnold/ggthemes]()

ggplot2: themes
========================================================
* Using `theme_bw()`
```{r, fig.width = 5, fig.height = 3}
p <- p + theme_bw()
p
```

ggplot2: themes
========================================================
* Using `theme_bw()`
```{r, fig.width = 5, fig.height = 3}
p <- p + theme_bw(base_size = 10, base_family = 'serif')
p
```

ggplot2: themes
========================================================
* Let's add some more layers - `geom_smooth()`
```{r, fig.width = 5, fig.height = 3}
p + geom_smooth()
```

ggplot2: additional geoms
========================================================
* Let's add some more layers - `geom_smooth()`
```{r, fig.width = 5, fig.height = 3}
p <- p + geom_smooth(method = 'lm')
p
```

ggplot2: additional geoms
========================================================
* Now what's in our plot?
```{r, eval = F}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length, 
                             colour = Species)
       ) +
  geom_point() +
  xlab('Width (cm)') + ylab('Length (cm)') +
  ggtitle('Iris sepal dimensions') +
  scale_colour_manual(values = c('red', 'blue', 'green')) + 
  theme_bw(base_size = 10, base_family = 'serif') + 
  geom_smooth(method = 'lm')
```

ggplot2: additional geoms
========================================================
* Let's do a quick demo to understand mapping aesthetics:
```{r, fig.width = 5, fig.height = 3}
p <- ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)
       ) +
  geom_point(aes(colour = Species)) +
  xlab('Width (cm)') + ylab('Length (cm)') +
  ggtitle('Iris sepal dimensions') +
  scale_colour_manual(values = c('red', 'blue', 'green')) + 
  theme_bw(base_size = 10, base_family = 'serif') + 
  geom_smooth(method = 'lm')
```

ggplot2: additional geoms
========================================================
* What happened?
```{r, fig.width = 5, fig.height = 3}
p
```

ggplot2: additional geoms
========================================================
* What happened?
```{r, fig.width = 5, fig.height = 3}
p <- ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)
       ) +
  geom_point(aes(colour = Species)) +
  xlab('Width (cm)') + ylab('Length (cm)') +
  ggtitle('Iris sepal dimensions') +
  scale_colour_manual(values = c('red', 'blue', 'green')) + 
  theme_bw(base_size = 10, base_family = 'serif') + 
  geom_smooth(method = 'lm')
```
* The `aes` function in `ggplot` applies globally
* The `aes` function in a "geom" applies only to the geom

ggplot2: additional geoms
========================================================
* What would happen here?
```{r, fig.width = 5, fig.height = 3}
p <- ggplot(data = iris) +
  geom_point(aes(x = Sepal.Width, y = Sepal.Length, 
                 colour = Species)) +
  xlab('Width (cm)') + ylab('Length (cm)') +
  ggtitle('Iris sepal dimensions') +
  scale_colour_manual(values = c('red', 'blue', 'green')) + 
  theme_bw(base_size = 10, base_family = 'serif') + 
  geom_smooth(method = 'lm')
```

Exercise 3
========================================================
* Using the `iris` dataset, make a scatterplot of petal length (y axis) vs petal width (x-axis)
* Give it appropriate axis labels and a title
* Map point type to species
* Give it a theme you like

ggplot2: Summary
========================================================
* Let's recap... `ggplot` is different from base
* Requires mapping data using aesthetics for plot layers/geoms
* Each plot layer has specific aesthetics
* Placement of aesthetics matters
* `theme` and pre-packaged themes modify the format

ggplot2: summary
========================================================
* We do not have time to explore all of the geoms in ggplot2
* Ask yourself these questions before plotting:
  * Why am I plotting? Exploratory or publication?
  * What do I want to show? Relationships, distributions, quantities?
  * How many variables do I want to plot?
  * Do I need more than one plot to convey the message?

Resources
========================================================
* Some arguments for [base](https://simplystatistics.org/2016/02/11/why-i-dont-use-ggplot2/) graphics v [ggplot2](http://varianceexplained.org/r/why-I-use-ggplot2/), most people are using ggplot2 these days
* [Winston Chang's cookbook](http://www.cookbook-r.com/Graphs/): good step-by-step examples
* [Official ggplot2 documentation](http://ggplot2.tidyverse.org/reference/)
* [RStudio cheatsheet](https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf)

ggplot2: Bonus exercise
========================================================
* What if we want to show the distribution of one variable?
* What if we want to show how it changes by a grouping factor? 
* We would not use `geom_point()`...
* Options include `geom_histogram()`, `geom_boxplot()`, `geom_bar()`, `geom_violin()`, others
* Could require some data wrangling

ggplot2: Bonus exercise
========================================================
* Let's plot the distribution of petal width by species
* The easy way:
```{r, fig.width = 5, fig.height = 3}
ggplot(data = iris, aes(x = Species, y = Petal.Width)) + 
  geom_boxplot() + 
  theme_bw()
```

ggplot2: Bonus exercise
========================================================
* Let's plot the mean (+/- spread) of petal width by species
* The hacker way (data wrangling):
```{r, fig.width = 5, fig.height = 3}
toplo <- group_by(iris, Species) %>% 
  summarise(
    ave = mean(Petal.Width), 
    std = sd(Petal.Width)
    )
toplo
```

ggplot2: Bonus exercise
========================================================
* Let's plot the mean (+/- spread) of petal width by species
* The hacker way (data wrangling):
```{r, fig.width = 5, fig.height = 3}
ggplot(toplo, aes(x = Species, y = ave)) + 
  geom_bar(stat = 'identity') + 
  geom_errorbar(aes(ymin = ave - std, ymax = ave + std)) + 
  theme_bw()
```

<!-- put this in the last slide -- use jquery to append page # to all sections -->

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script>

for(i=0;i<$("section").length;i++) {
if(i==0) continue
$("section").eq(i).append("<p style='font-size:medium;position:fixed;right:10px;top:10px;'>" + i + " / " + $("section").length + "</p>")
}

</script>