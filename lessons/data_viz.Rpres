```{r setup, echo = FALSE, message = F, warning = F}
library(tidyverse)

# chunk options
knitr::opts_chunk$set(warning = FALSE, message = FALSE, dpi = 300, fig.align = 'center', out.width = '700px')

# chunk hook
knitr::knit_hooks$set(
  small.mar = function(before = FALSE, options, envir) {
    if (before) par(mar = c(4, 4, .5, .5))  # smaller margin on top and right
    }, 
  def.mar = function(before, options, envir) {
    if (before) par(mar = c(5, 4, 4, 2))
    }
  )

```
<insertHTML:[columns.html]

Data Visualization
========================================================
date: November 5, 2017
author: Marcus W Beck
autosize: false
css: frm.css
transition: none
width: 960
height: 700

```{r fig.width = 8, fig.height = 4.5, out.width = '800px', echo = F}
data(iris)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species, group = Species)) + 
  geom_point() + 
  geom_smooth(method = 'lm') + 
  theme_bw()
```

Lesson outline
========================================================
A whirlwind tour of data viz
* Simple plots with base R
* `ggplot2`: introduction
* `ggplot2`: scatterplots
* `ggplot2`: barchart
* `ggplot2`: customizing 
* Other cool stuff

Motivation
========================================================
* You can make some really cool graphs in R

<div align='center'>
<img src="data_viz-figure/cool1.png" alt="Drawing" style="width: 600px;"/>
</div>

Motivation
========================================================
* You can make some really cool graphs in R

<div align='center'>
<img src="data_viz-figure/cool2.jpg" alt="Drawing" style="width: 900px;"/>
</div>

Motivation
========================================================
* You can make some really cool graphs in R

<div align='center'>
<img src="data_viz-figure/cool3.jpg" alt="Drawing" style="width: 700px;"/>
</div>

Motivation
========================================================
* You can make some really cool graphs in R

3d and interactive: 
https://blog.plot.ly/post/101360048217/7-plotly-graphs-in-3d-stocks-cats-and-lakes

A CERF example:
https://fawda123.github.io/ADOSR/depth_ex

Simple plots with base R
========================================================
* Base graphics in R (i.e, those that come with the software) can do most anything for you
* But they're kind of ugly in the default format (bad for pubs)
* Customization is tedious...
* Easy to use for quick, exploratory plots

Simple plots with base R
========================================================
* Let's load the `iris` dataset from the [datasets](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html) package
* Measurements on 150 flowers from three species
* *Fisher, R. A. (1936) The use of multiple measurements in taxonomic problems. Annals of Eugenics, 7, Part II, 179–188.*
```{r}
data(iris)
str(iris)
```

Simple plots with base R
========================================================
* Let's load the `iris` dataset from the [datasets](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html) package
* Measurements on 150 flowers from three species
* *Fisher, R. A. (1936) The use of multiple measurements in taxonomic problems. Annals of Eugenics, 7, Part II, 179–188.*
```{r}
data(iris)
head(iris)
```

Simple plots with base R
========================================================
* The scatterplot can be created with `plot`
* It can be created with one line... `plot(y ~ x, data)`
* This literally says... from the data object, plot the variables y (on the y-axis) against x (on the x-axis)
```{r, fig.width = 6, fig.height = 4.5, eval = F}
plot(Sepal.Length ~ Sepal.Width, data = iris)
```

Simple plots with base R
========================================================
```{r, fig.width = 5, fig.height = 4, small.mar = TRUE}
plot(Sepal.Length ~ Sepal.Width, data = iris)
```

Simple plots with base R
========================================================
* We can also use alternative notation without using the data argument
```{r, fig.width = 5, fig.height = 4, eval = F}
plot(iris$Sepal.Width, iris$Sepal.Length)
```
* As compared to...
```{r, fig.width = 6, fig.height = 4.5, eval = F}
plot(Sepal.Length ~ Sepal.Width, data = iris)
```
* Note the arrangement of y/x variables in each

Simple plots with base R
========================================================
* We can also use alternative notation without using the data argument
```{r, fig.width = 5, fig.height = 4, eval = T, out.width = '600px', small.mar = T}
plot(iris$Sepal.Width, iris$Sepal.Length)
```

Simple plots with base R
========================================================
* But check out the axis labels...
```{r, fig.width = 5, fig.height = 4, eval = T, out.width = '600px', small.mar = T}
plot(iris$Sepal.Width, iris$Sepal.Length)
```

Simple plots with base R
========================================================
* `plot` has lots of optional arguments, called within `plot` or separately using `par`
<div align='center'>
<img src="data_viz-figure/plotopt.png" alt="Drawing" style="width: 800px;"/>
</div> 

Simple plots with base R
========================================================
* Change axis labels, give it a title...
```{r, fig.width = 5, fig.height = 4, eval = T, out.width = '600px', def.mar = T}
plot(iris$Sepal.Width, iris$Sepal.Length, xlab = 'Width (cm)', ylab = 'Length (cm)', main = 'Sepal dimensions')
```

Simple plots with base R
========================================================
* The plot margins are too big, let's change that
```{r, fig.width = 5, fig.height = 4, eval = T, out.width = '600px'}
par(mar = c(4.5, 4.5, 1, 1))
plot(iris$Sepal.Width, iris$Sepal.Length, xlab = 'Width (cm)', ylab = 'Length (cm)', main = 'Sepal dimensions')
```

Simple plots with base R
========================================================
* Other base plot functions - bar plots
```{r, fig.width = 5, fig.height = 4, small.par = T}
barplot(table(iris$Species))
```

Simple plots with base R
========================================================
* Other base plot functions - histogram
```{r, fig.width = 5, fig.height = 4, small.par = T}
hist(iris$Sepal.Length)
```

Simple plots with base R
========================================================
* Other base plot functions - box plots
```{r, fig.width = 5, fig.height = 4, small.par = T}
boxplot(Sepal.Length ~ Species, data = iris)
```

Simple plots with base R
========================================================
* Other base plot functions - paired scatter plots
```{r, fig.width = 5, fig.height = 4, small.par = T}
pairs(iris)
```

ggplot2: overview
========================================================
* Base graphics are okay for exploratory stuff
* ggplot2 is meant to improve on base by linking the graph components following a **grammar of graphics** - like parts of speech
* Makes thinking, reasoning, and communicatings graphics easier
* Start with a foundational component to add additional pieces

<div align='center'>
<img src="data_viz-figure/ggplot2_hex.png" alt="Drawing" style="width: 200px;"/>
</div>

ggplot2: overview
========================================================
* We'll start by installing and loading [tidyverse](https://www.tidyverse.org/), which includes ggplot2 (you should have this from the earlier session)
```{r, eval = F}
install.packages('tidyverse')
library(tidyverse)
```
To verify it's loaded...
```{r}
loadedNamespaces()
```

ggplot2: overview
========================================================
* The general concepts of `ggplot2` revolve around the **data**, plot **layers**, **aesthetics**, and **mapping**
* This is by far the biggest hurdle in learning `ggplot`
* Just remember, the **aesthetics** are parts of the plot **layers** that **map** the variables in the **data** to the plot
* We'll demonstrate when this system breaks down to understand how it works

ggplot2: overview
========================================================
* We'll start with a very simple scatterplot with the iris data
```{r}
head(iris)
```

ggplot2: overview
========================================================
* All ggplot plots start with the `ggplot` function
* It will typically need two pieces of information, the **data** and how the data are **mapped** to the plot **aesthetics**
```{r, eval = F}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length))
```
* This says, make a `ggplot` object for the iris **data**, where the variables Sepal.Width and Sepal.Length are **mapped** to the **x** and **y** aesthetics

ggplot2: overview
========================================================
* The `aes` function defines the mapping of variables to aesthetics
```{r}
aes(x = Sepal.Width, y = Sepal.Length)
```

ggplot2: overview
========================================================
* What happens when we run this function?
```{r, fig.width = 5, fig.height = 3}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length))
```
* We get an empty plot - this is our foundation

ggplot2: overview
========================================================
* We add plot elements to the base plot using `+`
```{r, fig.width = 5, fig.height = 3}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)) +
  geom_point()
```

ggplot2: overview
========================================================
* We add plot elements to the base plot using `+`
```{r, eval = F}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)) +
  geom_point()
```
* "geoms" are plot layers that put the mapping of aesthetics in action
* There are many geoms: [http://ggplot2.tidyverse.org/reference/](http://ggplot2.tidyverse.org/reference/)

ggplot2:overview
========================================================
* We can swap out any geom that uses x/y aesthetics
```{r, fig.width = 5, fig.height = 3.5}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)) +
  geom_line()
```

ggplot2: overview
========================================================
* We can swap out any geom that uses x/y aesthetics
```{r, fig.width = 5, fig.height = 3.5}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)) +
  geom_count()
```

ggplot2: overview
========================================================
* We can swap out any geom that uses x/y aesthetics
```{r, fig.width = 5, fig.height = 3.5}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)) +
  geom_density_2d()
```

ggplot2: overview
========================================================
* We can swap out any geom that uses x/y aesthetics
```{r eval = F}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length)) +
  geom_linerange()
```
```
Error: geom_linerange requires the following missing aesthetics: ymin, ymax
Execution halted
```
* Oh snap, what happened?

ggplot2: overview
========================================================
* We can swap out any geom that uses x/y aesthetics
```{r eval = F}
?geom_linerange
```
<div align='center'>
<img src="data_viz-figure/aesreq.png" alt="Drawing" style="width: 800px;"/>
</div>

ggplot2: overview
========================================================
* Let's return to the `geom_point` layer, what are its aesthetics?
```{r eval = F}
?geom_point
```
<div align='center'>
<img src="data_viz-figure/aesreq2.png" alt="Drawing" style="width: 800px;"/>
</div>

ggplot2: overview
========================================================
* Let's add some more aesthetics
```{r, fig.width = 5, fig.height = 3.5}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length, 
                        colour = Species)) +
  geom_point()
```

ggplot2: overview
========================================================
* Let's add some more aesthetics
```{r, fig.width = 5, fig.height = 3.5}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length, 
                        colour = Species, size = Sepal.Width)) +
  geom_point()
```

ggplot2: overview
========================================================
* Let's add some more aesthetics, what's the difference?
```{r, fig.width = 5, fig.height = 3.5}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length, 
                        colour = Species, size = Species)) +
  geom_point()
```

ggplot2: overview
========================================================
* We'll use this plot going forward
```{r, eval = F}
ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length, 
                        colour = Species)) +
  geom_point()
```
Let's save it as an object:
```{r}
p <- ggplot(data = iris, aes(x = Sepal.Width, y = Sepal.Length, 
                             colour = Species)) +
  geom_point()
class(p)
```

ggplot2: overview
========================================================
* Let's modify the plot a bit
```{r, fig.width = 5, fig.height = 3.5}
p <- p + xlab('Width (cm)') + ylab('Length (cm)') +
  ggtitle('Iris sepal dimensions')
p
```

ggplot2: overview
========================================================
* Let's modify the plot a bit
```{r, fig.width = 5, fig.height = 3.5}
p <- p + scale_colour_manual(values = c('red', 'blue', 'green'))
p
```

ggplot2: overview
========================================================
adding lines, themes

ggplot2: barchart
========================================================
ex

ggplot2: customizing
========================================================
ex

Other cool stuff
========================================================
* Some arguments for [base](https://simplystatistics.org/2016/02/11/why-i-dont-use-ggplot2/) graphics v [ggplot2](http://varianceexplained.org/r/why-I-use-ggplot2/), most people are using ggplot2 these days

Sources of help
========================================================
ex